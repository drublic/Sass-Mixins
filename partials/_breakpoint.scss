/**
 * @description
 * These mixins generates Media Queries
 *
 * @author drublic
 *
 * @link caniuse http://caniuse.com/#feat=css-mediaqueries
 * @link spec http://www.w3.org/TR/css3-mediaqueries/
 *
 * Note: Please use the CSS unit `em` for device-width in order to stay
 * responsive.
 */

/**
 * @param device-width {number}
 * @content
 * @returns
 *   @media screen and (min-width: <device-width>) {
 *      <content>
 *   }
 *
 * @example
 *   .selector {
 *     x-at-least(40em) { width: 60%; }
 *   }
 */
@mixin x-at-least ($device-width) {
	@media screen and (min-width: $device-width) {
		@content;
	}
}

/**
 * @param device-width {number}
 * @content
 * @returns
 *   @media screen and (max-width: <device-width - 0.01>) {
 *      <content>
 *   }
 *
 * @example
 *   .selector {
 *     x-until(40em) { width: 100%; }
 *   }
 */
@mixin x-until ($device-width) {
	@media screen and (max-width: $device-width - 0.01) {
		@content;
	}
}

/**
 * @author romamatusevich
 *
 * @param point{string}, bp-mobile-width{number}, bp-tablet-width{number}
 * @content
 * @returns
 *   @media (max-width: <bp-mobile-width>) {
 *      <content>
 *   }
 *
 * @example
 *   .selector {
 *     x-breakpoints(mobile,  320px) { width: 100%; }
 *   }
 */
@mixin x-breakpoints($point, $bp-mobile-width: 640px, $bp-tablet-width: 1024px) {
	$bp-mobile: '(max-width: #{$bp-mobile-width})';
	$bp-tablet: '(min-width: #{$bp-mobile-width}) and (max-width: #{$bp-tablet-width})';
	$bp-desktop: '(min-width: #{$bp-tablet-width})';

	@if $point == mobile {
		@media #{$bp-mobile} {
			@content;
		}
	}
	@else if $point == tablet {
		@media #{$bp-tablet} {
			@content;
		}
	}
	@else if $point == desktop {
		@media #{$bp-desktop} {
			@content;
		}
	}
	@else {
		@warn "You are requesting an invalid breakpoint: `#{$point}`.";
	}
}
