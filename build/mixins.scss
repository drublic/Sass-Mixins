// Generates border-radius on a given element
// Documentation: docs/border-radius.md
@mixin x-border-radius ($values) {
	-webkit-border-radius: $values; // iOS Safari 3.2, Android 2.1
	        border-radius: $values;
}

// @include x-border-radius(20px 10px);

// Generates box-shadow on a given element
// Documentation: docs/box-shadow.md
@mixin x-box-shadow ($values) {
	-webkit-box-shadow: $values; // iOS Safari 3.2 - 4.3, Android 2.1+
	        box-shadow: $values;
}

// @include x-box-shadow(5px 5px 10px 5px #aaa);

// Generates a given element in border-box box-sizing by default
// Documentation: docs/box-sizing.md
@mixin x-box-sizing ($type: border-box) {
	-webkit-box-sizing: $type; // Safari <= 5.0, Chrome <= 9.0, iOS Safari 3.2 - 4.3 and Android 2.1 - 3.0
	   -moz-box-sizing: $type; // FF 2.0+
	        box-sizing: $type; // IE 8, Opera 9.5+
}

// @include x-box-sizing;

// Generates a linear gradient for a given element
// Documentation: docs/linear-gradient.md
@mixin x-linear-gradient($direction: "to bottom", $fallback: #ccc, $from: #ccc, $to: #aaa) {

	$old-direction: $direction;
	$veryold-direction: $direction;

	// New Syntax has to be evaluated to old one
	@if $direction == "to bottom" {
		$old-direction: "top";
	} @else if $direction == "to right" {
		$old-direction: "left";
	} @else if $direction == "to top" {
		$old-direction: "bottom";
	} @else if $direction == "to left" {
		$old-direction: "right";
	}

	// And also for very old syntax
	@if $direction == "to bottom" {
		$veryold-direction: "left top, left bottom";
	} @else if $direction == "to right" {
		$veryold-direction: "top left, bottom right";
	} @else if $direction == "to top" {
		$veryold-direction: "left bottom, left top";
	} @else if $direction == "to left" {
		$veryold-direction: "top right, bottom left";
	}

	// Provide a fallback-color
	background-color: $fallback;

	// Cross-browser linear-gradients
	background-image: -webkit-gradient(linear, unquote($veryold-direction), from($from), to($to)); // Android 2.1-3.0
	background-image: -webkit-linear-gradient(unquote($old-direction), $from, $to);
	background-image:    -moz-linear-gradient(unquote($old-direction), $from, $to);
	background-image:     -ms-linear-gradient(unquote($old-direction), $from, $to);
	background-image:      -o-linear-gradient(unquote($old-direction), $from, $to);
	background-image:         linear-gradient(unquote($direction),     $from, $to);
}

// @include x-linear-gradient("to bottom", #ccc, #ddd, #bbb);

// Generates multiple color stops in gradients for a given element
// Documentation: docs/multiple-colored-gradient.md
@mixin x-multiple-colored-gradient($args) {

	$gradient: ();
	$pos: nth($args, 1);
	$pos_newsyntax: ();

	@if ($pos != 'top')
		and ($pos != 'right')
		and ($pos != 'bottom')
		and ($pos != 'left')
		and ($pos != 'to top')
		and ($pos != 'to right')
		and ($pos != 'to bottom')
		and ($pos != 'to left') {
			$pos: 'top';
	}

	// New Syntax
	@if $pos == 'top' {
		$pos_newsyntax: 'to bottom';
	} @else if $pos == 'right' {
		$pos_newsyntax: 'to left';
	} @else if $pos == 'bottom' {
		$pos_newsyntax: 'to top';
	} @else if $pos == 'left' {
		$pos_newsyntax: 'to right';
	}

	@each $g in $args {
		@if ($g != 'top')
			and ($g != 'right')
			and ($g != 'bottom')
			and ($g != 'left')
			and ($g != 'to top')
			and ($g != 'to right')
			and ($g != 'to bottom')
			and ($g != 'to left') {
				$gradient: append($gradient, $g, comma);
		}
	}

	background-image:  -webkit-linear-gradient(unquote($pos), $gradient);
	background-image:     -moz-linear-gradient(unquote($pos), $gradient);
	background-image:      -ms-linear-gradient(unquote($pos), $gradient);
	background-image:       -o-linear-gradient(unquote($pos), $gradient);
	background-image: unquote('linear-gradient(#{$pos_newsyntax}, #{$gradient})');
}

// @include x-multiple-colored-gradient(( "top", #aaa 0%, #bbb 50%, #ccc 100% ));

// Enables using of CSS3 value `rem`
// Documentation: docs/rem.md
@mixin x-rem($property, $values, $main-font-size: 16px) {

	// Empty list for all values in px
	$px-values: ();
	$rem-values: ();

	// Iterate over entries
	@each $value in $values {

		// If the value is zero, return 0
		@if $value == 0 or $value == auto {
			$px-values: append($px-values, $value);
			$rem-values: append($rem-values, $value);

		// If the value is not zero, convert it from px to rem
		} @else {
			$px-values: append($px-values, ($value * $main-font-size) );
			$rem-values: append($rem-values, #{$value}rem);
		}
	}

	// Return the property and its list of converted values
	#{$property}: #{$px-values};
	#{$property}: #{$rem-values};
}

// @include x-rem(font-size, 1.3);

// Generates tab-sizing
@mixin x-tab-size ($value: 4) {
	-moz-tab-size: $value;
	  -o-tab-size: $value;
	     tab-size: $value;
}

// Generates transforms for a given element
// Documentation: docs/transition.md
@mixin x-transform ($values) {
	-webkit-transform: $values;
	   -moz-transform: $values;
	     -o-transform: $values;
	    -ms-transform: $values;
	        transform: $values;
}

// @include x-transform(rotate(1deg));

// Generates transitions on a given element
// Documentation: docs/transition.md
@mixin x-transition ($values) {
	-webkit-transition: $values;
	   -moz-transition: $values;
	     -o-transition: $values;
	        transition: $values;
}

// @include x-transition(background 0.3s ease-in);
